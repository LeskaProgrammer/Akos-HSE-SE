# =========================
# io.asm Ч низкоуровневые I/O-макросы дл€ RARS RISC-V
# «десь собраны макросы-обЄртки над системными вызовами (ecall).
# Ќомера сервисов соответствуют таблице syscalls RARS:
# 1  Ч печать целого из a0
# 4  Ч печать строки по адресу a0 (null-terminated)
# 5  Ч чтение целого в a0
# 10 Ч завершение программы
# 11 Ч печать символа (код в a0)
# ѕо соглашению: a0Цa7 Ч аргументы/результат, ecall использует a7 как номер сервиса.
# =========================

.macro read_int (%register)
	# —читать целое число из консоли.
	# ƒо вызова: ничего
	# ѕосле вызова: в %register Ч прочитанное значение (копи€ из a0)
	li a7 5           # сервис 5: read_int
	ecall
	mv %register a0   # перенести результат в указанный регистр
.end_macro

.macro print_str (%string)
   # Ќапечатать строковый литерал (C-строка с завершающим нулЄм).
   # макрос объ€вл€ет метку 'str' в .data при каждом разворачивании.
   # ¬ реальном коде лучше использовать уникальные имена; здесь оставл€ем как есть.
   .data
	str: .asciz %string
   .text
       li a7, 4       # сервис 4: print_string
       la a0, str     # a0 ? адрес строки
       ecall
.end_macro

.macro print_from_adress (%adr)
	# Ќапечатать строку, адрес которой уже есть (нулЄм-терминированна€).
	li a7 4           # сервис 4: print_string
	mv a0 %adr        # a0 ? адрес
	ecall
.end_macro

.macro print_int_from_register(%register)
    # Ќапечатать целое из указанного регистра.
    mv a0 %register   # a0 ? значение
    li a7 1           # сервис 1: print_int
    ecall
.end_macro

.macro print_char(%char)
   # Ќапечатать одиночный символ с заданным кодом.
   li a7, 11          # сервис 11: print_char
   li a0, %char       # a0 ? код символа
   ecall
.end_macro

.macro newline
   # ѕеревод строки Ч удобно дл€ форматировани€ вывода.
   print_char('\n')
.end_macro

.macro register_to_a0 (%reg)
	# —копировать слово из произвольного регистра в a0 (унификаци€ интерфейса).
	mv a0 %reg
.end_macro

.macro exit
    #  орректное завершение программы.
    li a7, 10         # сервис 10: exit
    ecall
.end_macro
